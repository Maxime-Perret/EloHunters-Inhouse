import Bull, { JobId, JobStatus, Queue, QueueOptions } from 'bull';
import type { ScheduledTaskBaseStrategy } from '../types/ScheduledTaskBaseStrategy';
import type { ScheduledTaskCreateRepeatedTask } from '../types/ScheduledTaskCreateRepeatedTask';
import type { ScheduledTasksTaskOptions } from '../types/ScheduledTasksTaskOptions';
export interface ScheduledTaskRedisStrategyOptions {
    queue?: string;
    bull?: QueueOptions;
}
export interface ScheduledTaskRedisStrategyJob {
}
export interface ScheduledTaskRedisStrategyListRepeatedOptions {
    start?: number;
    end?: number;
    asc?: boolean;
}
export interface ScheduledTaskRedisStrategyListOptions extends ScheduledTaskRedisStrategyListRepeatedOptions {
    types: JobStatus[];
}
export declare type BullClient = Queue<ScheduledTaskRedisStrategyJob | null>;
export declare class ScheduledTaskRedisStrategy implements ScheduledTaskBaseStrategy {
    readonly options: QueueOptions;
    readonly queue: string;
    private bullClient;
    constructor(options?: ScheduledTaskRedisStrategyOptions);
    get client(): BullClient;
    connect(): void;
    create<T = unknown>(task: string, payload?: ScheduledTaskRedisStrategyJob | null, options?: ScheduledTasksTaskOptions): Promise<Bull.Job<T>> | undefined;
    createRepeated(tasks: ScheduledTaskCreateRepeatedTask[]): Promise<void>;
    delete(id: JobId): Promise<void>;
    list<T = unknown>(options: ScheduledTaskRedisStrategyListOptions): Promise<Bull.Job<T>[]> | undefined;
    listRepeated(options: ScheduledTaskRedisStrategyListRepeatedOptions): Promise<Bull.JobInformation[]> | undefined;
    get<T = unknown>(id: JobId): Promise<Bull.Job<T> | null> | undefined;
    run(task: string, payload: unknown): Promise<unknown>;
}
//# sourceMappingURL=ScheduledTaskRedisStrategy.d.ts.map