import type { SendMessageBatchResultEntryList } from 'aws-sdk/clients/sqs';
import { ConsumerOptions } from 'sqs-consumer';
import { Producer } from 'sqs-producer';
import type { ScheduledTaskBaseStrategy } from '../types/ScheduledTaskBaseStrategy';
import type { ScheduledTaskCreateRepeatedTask } from '../types/ScheduledTaskCreateRepeatedTask';
import type { ScheduledTasksTaskOptions } from '../types/ScheduledTasksTaskOptions';
export interface ScheduledTaskSQSStrategyMessageBody {
    task: string;
    payload?: unknown;
    options: ScheduledTasksTaskOptions;
}
export declare type SQSClient = Producer;
export declare class ScheduledTaskSQSStrategy implements ScheduledTaskBaseStrategy {
    readonly options: ConsumerOptions;
    private producer;
    constructor(options: ConsumerOptions);
    get client(): SQSClient;
    connect(): void;
    create(task: string, payload?: unknown, options?: ScheduledTasksTaskOptions): Promise<SendMessageBatchResultEntryList>;
    createRepeated(tasks: ScheduledTaskCreateRepeatedTask[]): Promise<void>;
    delete(): void;
    list(): void;
    listRepeated(): void;
    get(): void;
    run(task: string, payload: unknown): Promise<unknown>;
    private handleMessage;
    private handleBatch;
}
//# sourceMappingURL=ScheduledTaskSQSStrategy.d.ts.map